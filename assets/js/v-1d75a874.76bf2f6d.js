(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[456],{6445:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(8133).uE)('<h1 id="overview"><a class="header-anchor" href="#overview">#</a> Overview</h1><p>A parser is responsible for converting other structures into plain old JavaScript objects (POJOs).</p><h2 id="core-parsers"><a class="header-anchor" href="#core-parsers">#</a> Core parsers</h2><p>The following parsers are included by default in <code>node-konfig-core</code>:</p><ul><li><code>JSONParser</code></li><li><code>TOMLParser</code></li><li><code>YAMLParser</code></li></ul><h2 id="usage"><a class="header-anchor" href="#usage">#</a> Usage</h2><p>For loaders that support it, an appropriate parser must be instantiated and passed to the loader. Parsers can be shared between loaders.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Konfig <span class="token keyword">from</span> <span class="token string">&quot;@willsoto/node-konfig-core&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Konfig<span class="token punctuation">.</span>FileLoader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  files<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;config.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      parser<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Konfig<span class="token punctuation">.</span>JSONParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;config.yaml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">// Accepts any options that the `js-yaml` library accepts</span>\n      parser<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Konfig<span class="token punctuation">.</span>YAMLParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;config.toml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      parser<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Konfig<span class="token punctuation">.</span>TOMLParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',8),e={render:function(n,s){return p}}},7211:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-1d75a874",path:"/parsers/",title:"Overview",frontmatter:{},excerpt:"",headers:[{level:2,title:"Core parsers",slug:"core-parsers",children:[]},{level:2,title:"Usage",slug:"usage",children:[]}],filePathRelative:"parsers/README.md",git:{updatedTime:161222883e4}}}}]);